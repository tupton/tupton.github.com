<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Uptonian Thoughts]]></title>
  <link href="http://blog.thomasupton.com/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.thomasupton.com/"/>
  <updated>2013-10-13T18:46:32-05:00</updated>
  <id>http://blog.thomasupton.com/</id>
  <author>
    <name><![CDATA[Thomas Upton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remove leading whitespace]]></title>
    <link href="http://blog.thomasupton.com/2013/10/remove-leading-whitespace"/>
    <updated>2013-10-13T14:28:00-05:00</updated>
    <id>http://blog.thomasupton.com/2013/10/remove-leading-whitespace</id>
    <content type="html"><![CDATA[<p>Sometimes it’s useful to copy some code from a file and paste it somewhere else as an example. For
instance, I like to write code in a <a href="http://jsfiddle.net/">jsfiddle</a> and then paste a relevant subset of that
code to a <a href="http://stackoverflow.com/">Stack Overflow</a> answer. I have also copied code from a project file to paste into
HipChat to quickly explain something to a coworker, or to paste into a JIRA ticket as a comment.</p>

<p>If you copy code from the middle of a file, there’s usually some leading whitespace on all lines
that you do not want to preserve in the context into which you are pasting the code. The problem is
that you don’t want to get rid of <em>all</em> leading whitespace on <em>all</em> lines; you want to keep the
indentation intact. I usually get rid of the unwanted whitespace by manually deleting it
if it’s only one or two lines or by pasting into a new <code>vim</code> buffer and using <code>&lt;&lt;</code> to shift the text
over as much as desired.</p>

<p>To illustrate, I have this text:</p>

<p>``` javascript
        var flatten = function(result, next_array) {
            console.log(‘current result’, result);
            return result.concat(next_array);
        };</p>

<pre><code>    [1, [2], [3, 4]]
        .reduce(flatten, []); ```
</code></pre>

<p>and I want this text:</p>

<p>``` javascript
    var flatten = function(result, next_array) {
        console.log(‘current result’, result);
        return result.concat(next_array);
    };</p>

<pre><code>[1, [2], [3, 4]]
    .reduce(flatten, []); ```
</code></pre>

<h2 id="remove-leading-whitespace">Remove leading whitespace</h2>

<p>I knew there must be a way to remove the shortest leading whitespace from all lines
programmatically, but I’m not familiar enough with <code>awk</code>, <code>sed</code>, or shell scripting in general to
tackle the problem. I <a href="http://stackoverflow.com/questions/19328975/remove-shortest-leading-whitespace-from-all-lines/19332908">asked the question on Stack Overflow</a> and got a few great answers. I
ended up accepting <a href="http://stackoverflow.com/questions/19328975/remove-shortest-leading-whitespace-from-all-lines/19332908#19332908">the single process <code>awk</code> version</a>.</p>

<p>If you use OS X, the built-in <code>awk</code> will not work with the given solution. If you use
<a href="http://brew.sh/">Hombrew</a>, fixing that is just a simple matter of <code>brew install gawk</code> and using <code>gawk</code> instead
of <code>awk</code>.</p>

<p>The given solution has a great explanation and works fine, but I made one addition. If the input is
a single line with <em>no</em> leading whitespace, the script fails. I fixed this with <code>if (!s) s=0;</code> at
the beginning of the <code>END</code> block.</p>

<p>The final version of my command looks like this. I’ve added some comments to explain what’s going
on.</p>

<p>``` bash
    gawk  -F ‘\S.*’ \              # The awk field separator is everything after the first non-whitespace character, inclusive
    ‘{                              # The first block of the awk program
        l=length($1);               # The length of the first field, the leading whitespace
        if(l&gt;0)                     # If the length of whitespace is non-zero,
            if(NR==1)               # and this is the first record,
                s=l;                # make ‘s’, the number of whitespace characters, equal to its length
        else s=s&gt;l?l:s;             # otherwise, make s the shorter of itself and the current whitespace
        a[NR]=$0                    # Index the entire line in an array by line number
    }                               # End of the first block of the awk program</p>

<pre><code>END{                            # Start the END, printing block of the awk program
    if(!s)s=0;                  # Make sure we always have a value for s
    for(i=1;i&lt;=NR;i++){         # Loop over all records
        sub("^ {"s"}","",a[i]); # Substitute 's' whitespace characters with nothing
        print a[i];             # Print the line after substition
    }                           # End of the loop over records
}'                              # End of the END block of the awk program ```
</code></pre>

<p>It is worth noting that this probably only work on text with spaces for whitespace, not
tabs or mixed whitespace.</p>

<h2 id="integrate-with-an-alfred-workflow">Integrate with an Alfred workflow</h2>

<p>The ability to remove the shortest leading whitespace with a shell command is great, but I really
wanted a way to do this quickly with text on the clipboard. <a href="http://support.alfredapp.com/workflows">Alfred workflows</a> make that
possible.</p>

<p>I created a simple three step workflow with a hotkey trigger, a script action, and a clipboard
output. You can <a href="https://dl.dropboxusercontent.com/u/5753691/Paste-shifted-text.alfredworkflow">download it here</a> and use it with Alfred 2.</p>

<p>And now you can copy code in context and paste it with no leading whitespace wherever you want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch Deleting Last.fm Scrobbles]]></title>
    <link href="http://blog.thomasupton.com/2012/08/batch-deleting-last-fm-scrobbles"/>
    <updated>2012-08-12T20:06:00-05:00</updated>
    <id>http://blog.thomasupton.com/2012/08/batch-deleting-last-fm-scrobbles</id>
    <content type="html"><![CDATA[<p>I recently came home from a trip and synced my iPhone in iTunes in an attempt to scrobble the music
that I listened to on that trip. I use <a href="http://meloapp.com/faq/">Melo</a> to scrobble tracks played in iTunes, and it usually
works quite well because I never know it’s there.</p>

<p>I’m not entirely sure if Melo, iTunes, or <a href="http://last.fm/">Last.fm</a> is to blame, but I ended up with a large amount of
scrobbles from a repeated handful of songs. I have over 75,000 tracks scrobbled in Last.fm, but I
use their recommendations and like to look at my stats, so artificially inflating my scrobble
count with three artists was extremely undesirable.</p>

<p>I had 59 pages of unwanted scrobbles; I needed to quickly delete nearly 3000 scrobbles. Last.fm
doesn’t have a way to batch delete (or otherwise manage) your scrobble tracks, so I manually clicked
all the delete links on the first page.</p>

<p>That got old before I had even deleted ten scrobbles. I figured out a way to programmatically and
quickly delete a page of scrobbles. I still have to manually get to each page, but this makes it
much easier.</p>

<p><code>javascript
    jQuery('#deletablert a.delete').each(function(_, a) {
        a.click();
    });
</code></p>

<p>I just open up the console with <code>⌘-⌥-I</code>, paste in that snippet of code, and hit enter. Here is what
it looks like in action.</p>

<p><img src="http://farm9.staticflickr.com/8282/7770297078_73fafc7541_o_d.png" alt="Batch deleting Last.fm scrobbles." title="Last.fm Batch Delete" /></p>

<p>Since <a href="http://jquery.com/">jQuery</a> is already embedded in Last.fm’s pages, I just select all the delete links and
emit a click on each one. The entire page is deleted in a few seconds. When it’s done, I can click
the link to the previous page and repeat.</p>

<p>I don’t expect this will be very useful to anyone but myself for the next ten minutes, but it could
come in handy in case you’ve been listening to too much Carly Rae Jepsen.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntastic]]></title>
    <link href="http://blog.thomasupton.com/2012/05/syntastic"/>
    <updated>2012-05-20T14:13:08-05:00</updated>
    <id>http://blog.thomasupton.com/2012/05/syntastic</id>
    <content type="html"><![CDATA[<p>I love writing with <code>vim</code>, but — for many valid reasons — some people are averse to it. I think the
steep (–ish) learning curve has something to do with it, but I think some people really don’t want
to give up their IDE. The thing is, <code>vim</code> isn’t <em>just</em> a text editor. You can extend it to do pretty
much anything, including features that normally show up in IDEs.</p>

<p>I recently started using <a href="https://github.com/scrooloose/syntastic">syntastic</a>, which is a <code>vim</code> plugin that runs linters or syntax checkers
and displays warnings and errors right in your window. IDEs like Eclipse or Xcode provide this
syntax-checking for a couple of languages, but syntastic supports many languages and linters out of
the box with pluggable support for nearly any language.</p>

<h2 id="setup">Setup</h2>

<p>If you use <a href="https://github.com/tpope/vim-pathogen">pathogen</a> like every sane <code>vim</code> user does, installing syntastic is just like any other
plugin. Clone the repository or create a submodule in <code>bundle/syntastic</code> and you’re ready to go.</p>

<p>I mainly work with Javascript, Python, HTML, and CSS, so that’s what I’ll talk about. It’s worth
checking out the syntax checkers in <code>bundle/syntastic/syntax_checkers/</code>, even if you just look at
the list of files there. You might have to dive into the files to figure out which linters are
actually supported as it’s not clearly documented.</p>

<p>Before we get to configuring individual syntax checkers, syntastic itself has a couple of
configuration options. Syntastic has what it refers to as a “mode map”, which is basically just a
way to configure which file types are checked. Here is the relevant config option from <a href="https://github.com/tupton/vim-support/blob/master/vimrc#L302">my
vimrc</a>:</p>

<p><code>vim
	" On by default, turn it off for html
	let g:syntastic_mode_map = { 'mode': 'active',
		\ 'active_filetypes': [],
		\ 'passive_filetypes': ['html'] }
</code></p>

<p>The ‘mode’ option set to active means that syntastic is on by default, so we can leave the list of
‘active_filetypes’ empty. The ‘passive_filetypes’ names filetypes that syntastic does not attempt to
check. I don’t check HTML files because I mainly work with templates that either can’t or won’t
validate with most HTML syntax checkers. If templates use non-standard attributes, it’s hard for a
syntax checker to do its job.</p>

<h3 id="python">Python</h3>

<p>Setting up syntastic for use with python was extremely easy. Just install <a href="http://pypi.python.org/pypi/pyflakes">pyflakes</a> with
<code>pip install pyflakes</code> and set up some related options. I ignore certain errors regarding
whitespace, indentation, and end-of-line backslashes, but those are all customizable. See the <a href="http://pep8.readthedocs.org/en/latest/intro.html#error-codes">pep8
error code documentation</a> for an explanation of the error codes.</p>

<p><code>vim
    " Use flake8
    let g:syntastic_python_checkers = ['flake8']
    let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801"'
</code></p>

<h3 id="javascript">Javascript</h3>

<p>There are a number of Javascript linters, including <a href="http://www.jslint.com/">JS Lint</a> and Google’s <a href="https://developers.google.com/closure/utilities/">Closure
linter</a>, but I decided to use the communtiy-driven <a href="http://www.jshint.com/">JS Hint</a>.  JS Hint can be
configured with a jshintrc, which just is a JSON object that contains options. There are two
categories of options: those that enforce stricter rules than the defaults and those that relax
default checks. The <a href="http://www.jshint.com/options/">options page of the jshint website</a> does a great job of
explaining each option. You can <a href="https://github.com/tupton/dotfiles/blob/master/jshintrc">view my jshintrc on my Github page</a>. I added a few
“enforcing” options, but the only “relaxing” option I use is <code>sub</code>, which allows
subscript notation when accessing properties, e.g. <code>this['domNode']</code> as well as <code>this.domNode</code>.</p>

<p>You can tell syntastic to use jshint with the following config option:</p>

<p><code>vim
" Use jshint (uses ~/.jshintrc)
let g:syntastic_javascript_checkers = ['jshint']
</code></p>

<h2 id="usage">Usage</h2>

<p><img src="http://farm8.staticflickr.com/7085/7235544916_6f48ae8f45_o_d.png" alt="syntastic and underscore.js" /></p>

<p>By default, syntastic runs your file through the configured filetype’s linter whenever the buffer is
written. If there are errors, they are highlighted inline. When your cursor is on a line with an
error, the description of the error is visible in the status line. You can use the <code>:Errors</code> command
to open a quickfix window with a list of all errors in the file. Pressing enter on an error will
take you to that line in the file. Syntastic uses <a href="http://vimdoc.sourceforge.net/htmldoc/sign.html">vim’s signs</a>, which means that a
gutter with a sign appears on the left side of every line with an error on it, making it easy to
scan the buffer for errors. You can change these symbols with some syntastic options.</p>

<p><code>vim
    " Better :sign interface symbols
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '!'
</code></p>

<p>You can configure syntastic in many other ways, including telling it to check a buffer whenever it
is opened. I explored the help file (<code>:help syntastic</code>) when I first started using syntastic, and it
was incredibly helpful. I encourage anyone who uses syntastic to do the same.</p>

<p>Syntastic has already helped me avoid many typos and silly errors that would ordinarily be hard to
track down. It’s an invaluable tool in my workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Handle Pattern]]></title>
    <link href="http://blog.thomasupton.com/2012/03/the-handle-pattern"/>
    <updated>2012-03-25T13:12:06-05:00</updated>
    <id>http://blog.thomasupton.com/2012/03/the-handle-pattern</id>
    <content type="html"><![CDATA[<p>I’m not entirely sure if there’s a better name for this pattern that already exists, but I like “handle pattern” to describe this method of keeping track of and managing “subscriptions”.</p>

<p>``` javascript
var subscriber = (function() {</p>

<pre><code>var _listeners = {};
    
var s = {
    // Listen to a channel and call a callback when that channel fires
    listen: function(channel, cb) {
        // Add the callback to the list of listeners on the given channel
        _listeners[channel] = _listeners[channel] || [];
        _listeners[channel].push(cb);
        
        return {
            // Return an object that can be used to remove the callback from the channel
            unlisten: function() {
                // Remove the callback from the list of listeners on that channel
                _listeners[channel].splice(_listeners[channel].indexOf(cb), 1);
            }
        }
    },
    
    // Manually fire events on a given channel.
    publish: function(channel) {
        _listeners[channel] = _listeners[channel] || [];
        _listeners[channel].forEach(function(cb) {
            cb();
        });
    }
};

return s; })();
</code></pre>

<p>var h = subscriber.listen(‘update’, function() {
    console.log(‘The update event was fired!’);
});</p>

<p>subscriber.publish(‘update’); // &gt; “The update event was fired!”</p>

<p>h.unlisten();</p>

<p>subscriber.publish(‘update’); // &gt; <no output="">
```</no></p>

<p>When you have an event-driven application, like a Javascript app that performs actions based on user interaction or based on back end “pushes” to a listening front end, you often have a central “publisher” that handles firing events when certain actions occur. It makes sense to have a static <code>listen</code> function that takes a “channel” and a callback function to call when that channel gets updated. The problem comes when you have to decide how to <em>stop</em> listening to that channel. If you go with a static <code>unlisten</code> function on the publisher with the same signature as <code>listen</code> (the channel and callback), you need to keep track of which callback is listening to which channel, and it can get messy.</p>

<p>Instead, <code>listen</code> can return a <code>handle</code>, which is just an object that contains a method <code>unlisten</code> that knows exactly how to stop listening on the specific channel and with the specific callback that was given to <code>listen</code>. Then, the caller just needs to keep track of the return values of <code>listen</code> (as opposed to the <em>arguments</em> to <code>listen</code>) in order to be able to <code>unlisten</code> later.</p>

<p>The <a href="http://dojotoolkit.org/">Dojo</a> <a href="http://dojotoolkit.org/reference-guide/1.7/dojo/Stateful.html">Stateful</a> interface uses this pattern to watch values on objects. If you watch a property, a callback can be fired each time that property changes. The return value of <code>watch</code> is a handle that can be used to stop watching that particular property value.</p>

<p>Feel free to <a href="http://jsfiddle.net/tupton/nZKQz/">play around with this code on JSFiddle</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration]]></title>
    <link href="http://blog.thomasupton.com/2012/02/configuration"/>
    <updated>2012-02-18T20:43:38-06:00</updated>
    <id>http://blog.thomasupton.com/2012/02/configuration</id>
    <content type="html"><![CDATA[<p>Starting a fresh environment on a new system isn’t a very common or regular task, but when you do, it comes in handy to have a quick and easy way to do it. To help with this, I keep my <code>vim</code> <a href="https://github.com/tupton/vim-support">environment</a> and my <a href="https://github.com/tupton/dotfiles">environment dot files</a> in version control on Github.</p>

<p>I use <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> to manage my <code>vim</code> plugins. I follow the examples in <a href="http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/">this great article on plugin management with Pathogen</a> to keep most of my plugins as <code>git</code> submodules. Installing my <code>vim</code> environment is just a matter of cloning the <code>git</code> repository and symlinking my <code>vimrc</code>.</p>

<p>I just spent some time cleaning up and organizing my dotfiles.  I wasn’t even using my old dotfiles repository on GitHub, but I quickly rectified that. I now keep my dotfiles in <code>~/.dotfiles</code> and symlink them to <code>~</code>. There is a helper script in my <a href="https://github.com/tupton/dotfiles">dotfiles repository</a> that sets up these symlinks.</p>

<p>Along with the usual <code>bashrc</code>, there are a few config files that aren’t as common. My <code>ackrc</code> defines a few convenient options and ignores directories with built artifacts in them. My (old) <code>pythonrc</code> defines a tab-completion function, although this might be outdated at this point. There’s a <code>tm_properties</code> config for <a href="http://blog.macromates.com/2011/textmate-2-0-alpha/">TextMate 2</a>.</p>

<p>Hopefully the fact that my configuration is out in the open will bring to light some useful features that I probably take for granted but you might not know about. So, go explore! Check out my <code>inputrc</code>, for example. I know that I discover new things almost every time I look at someone else’s <code>vimrc</code> or <code>bashrc</code>.</p>

<p>Do you have any configuration tips or tricks? Let me know.</p>
]]></content>
  </entry>
  
</feed>
