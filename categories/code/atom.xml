<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Uptonian Thoughts]]></title>
  <link href="http://blog.thomasupton.com/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.thomasupton.com/"/>
  <updated>2013-03-26T10:52:15-05:00</updated>
  <id>http://blog.thomasupton.com/</id>
  <author>
    <name><![CDATA[Thomas Upton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Batch Deleting Last.fm Scrobbles]]></title>
    <link href="http://blog.thomasupton.com/2012/08/batch-deleting-last-fm-scrobbles"/>
    <updated>2012-08-12T20:06:00-05:00</updated>
    <id>http://blog.thomasupton.com/2012/08/batch-deleting-last-fm-scrobbles</id>
    <content type="html"><![CDATA[<p>I recently came home from a trip and synced my iPhone in iTunes in an attempt to scrobble the music
that I listened to on that trip. I use <a href="http://meloapp.com/faq/">Melo</a> to scrobble tracks played in iTunes, and it usually
works quite well because I never know it’s there.</p>

<p>I’m not entirely sure if Melo, iTunes, or <a href="http://last.fm/">Last.fm</a> is to blame, but I ended up with a large amount of
scrobbles from a repeated handful of songs. I have over 75,000 tracks scrobbled in Last.fm, but I
use their recommendations and like to look at my stats, so artificially inflating my scrobble
count with three artists was extremely undesirable.</p>

<p>I had 59 pages of unwanted scrobbles; I needed to quickly delete nearly 3000 scrobbles. Last.fm
doesn’t have a way to batch delete (or otherwise manage) your scrobble tracks, so I manually clicked
all the delete links on the first page.</p>

<p>That got old before I had even deleted ten scrobbles. I figured out a way to programmatically and
quickly delete a page of scrobbles. I still have to manually get to each page, but this makes it
much easier.</p>

<p><code>javascript
    jQuery('#deletablert a.delete').each(function(_, a) {
        a.click();
    });
</code></p>

<p>I just open up the console with <code>⌘-⌥-I</code>, paste in that snippet of code, and hit enter. Here is what
it looks like in action.</p>

<p><img src="http://farm9.staticflickr.com/8282/7770297078_73fafc7541_o_d.png" alt="Batch deleting Last.fm scrobbles." title="Last.fm Batch Delete" /></p>

<p>Since <a href="http://jquery.com/">jQuery</a> is already embedded in Last.fm’s pages, I just select all the delete links and
emit a click on each one. The entire page is deleted in a few seconds. When it’s done, I can click
the link to the previous page and repeat.</p>

<p>I don’t expect this will be very useful to anyone but myself for the next ten minutes, but it could
come in handy in case you’ve been listening to too much Carly Rae Jepsen.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntastic]]></title>
    <link href="http://blog.thomasupton.com/2012/05/syntastic"/>
    <updated>2012-05-20T14:13:08-05:00</updated>
    <id>http://blog.thomasupton.com/2012/05/syntastic</id>
    <content type="html"><![CDATA[<p>I love writing with <code>vim</code>, but — for many valid reasons — some people are averse to it. I think the
steep (–ish) learning curve has something to do with it, but I think some people really don’t want
to give up their IDE. The thing is, <code>vim</code> isn’t <em>just</em> a text editor. You can extend it to do pretty
much anything, including features that normally show up in IDEs.</p>

<p>I recently started using <a href="https://github.com/scrooloose/syntastic">syntastic</a>, which is a <code>vim</code> plugin that runs linters or syntax checkers
and displays warnings and errors right in your window. IDEs like Eclipse or Xcode provide this
syntax-checking for a couple of languages, but syntastic supports many languages and linters out of
the box with pluggable support for nearly any language. </p>

<h2 id="setup">Setup</h2>

<p>If you use <a href="https://github.com/tpope/vim-pathogen">pathogen</a> like every sane <code>vim</code> user does, installing syntastic is just like any other
plugin. Clone the repository or create a submodule in <code>bundle/syntastic</code> and you’re ready to go.</p>

<p>I mainly work with Javascript, Python, HTML, and CSS, so that’s what I’ll talk about. It’s worth
checking out the syntax checkers in <code>bundle/syntastic/syntax_checkers/</code>, even if you just look at
the list of files there. You might have to dive into the files to figure out which linters are
actually supported as it’s not clearly documented.</p>

<p>Before we get to configuring individual syntax checkers, syntastic itself has a couple of
configuration options. Syntastic has what it refers to as a “mode map”, which is basically just a
way to configure which file types are checked. Here is the relevant config option from <a href="https://github.com/tupton/vim-support/blob/master/vimrc#L302">my
vimrc</a>:</p>

<p><code>vim
	" On by default, turn it off for html
	let g:syntastic_mode_map = { 'mode': 'active',
		\ 'active_filetypes': [],
		\ 'passive_filetypes': ['html'] }
</code></p>

<p>The ‘mode’ option set to active means that syntastic is on by default, so we can leave the list of
‘active_filetypes’ empty. The ‘passive_filetypes’ names filetypes that syntastic does not attempt to
check. I don’t check HTML files because I mainly work with templates that either can’t or won’t
validate with most HTML syntax checkers. If templates use non-standard attributes, it’s hard for a
syntax checker to do its job.</p>

<h3 id="python">Python</h3>

<p>Setting up syntastic for use with python was extremely easy. Just install <code>[pyflakes][]</code> with
<code>pip install pyflakes</code> and set up some related options. I ignore certain errors regarding
whitespace, indentation, and end-of-line backslashes, but those are all customizable. See the <a href="http://pep8.readthedocs.org/en/latest/intro.html#error-codes">pep8
error code documentation</a> for an explanation of the error codes.</p>

<p><code>vim
    " Use flake8
    let g:syntastic_python_checkers = ['flake8']
    let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801"'
</code></p>

<h3 id="javascript">Javascript</h3>

<p>There are a number of Javascript linters, including <a href="http://www.jslint.com/">JS Lint</a> and Google’s <a href="https://developers.google.com/closure/utilities/">Closure
linter</a>, but I decided to use the communtiy-driven <a href="http://www.jshint.com/">JS Hint</a>.  JS Hint can be
configured with a jshintrc, which just is a JSON object that contains options. There are two
categories of options: those that enforce stricter rules than the defaults and those that relax
default checks. The <a href="http://www.jshint.com/options/">options page of the jshint website</a> does a great job of
explaining each option. You can <a href="https://github.com/tupton/dotfiles/blob/master/jshintrc">view my jshintrc on my Github page</a>. I added a few
“enforcing” options, but the only “relaxing” option I use is <code>sub</code>, which allows
subscript notation when accessing properties, e.g. <code>this['domNode']</code> as well as <code>this.domNode</code>.</p>

<p>You can tell syntastic to use jshint with the following config option:</p>

<p><code>vim
" Use jshint (uses ~/.jshintrc)
let g:syntastic_javascript_checkers = ['jshint']
</code></p>

<h2 id="usage">Usage</h2>

<p><img src="http://farm8.staticflickr.com/7085/7235544916_6f48ae8f45_o_d.png" alt="syntastic and underscore.js" /></p>

<p>By default, syntastic runs your file through the configured filetype’s linter whenever the buffer is
written. If there are errors, they are highlighted inline. When your cursor is on a line with an
error, the description of the error is visible in the status line. You can use the <code>:Errors</code> command
to open a quickfix window with a list of all errors in the file. Pressing enter on an error will
take you to that line in the file. Syntastic uses <a href="http://vimdoc.sourceforge.net/htmldoc/sign.html">vim’s signs</a>, which means that a
gutter with a sign appears on the left side of every line with an error on it, making it easy to
scan the buffer for errors. You can change these symbols with some syntastic options.</p>

<p><code>vim
    " Better :sign interface symbols
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '!'
</code></p>

<p>You can configure syntastic in many other ways, including telling it to check a buffer whenever it
is opened. I explored the help file (<code>:help syntastic</code>) when I first started using syntastic, and it
was incredibly helpful. I encourage anyone who uses syntastic to do the same.</p>

<p>Syntastic has already helped me avoid many typos and silly errors that would ordinarily be hard to
track down. It’s an invaluable tool in my workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Handle Pattern]]></title>
    <link href="http://blog.thomasupton.com/2012/03/the-handle-pattern"/>
    <updated>2012-03-25T13:12:06-05:00</updated>
    <id>http://blog.thomasupton.com/2012/03/the-handle-pattern</id>
    <content type="html"><![CDATA[<p>I’m not entirely sure if there’s a better name for this pattern that already exists, but I like “handle pattern” to describe this method of keeping track of and managing “subscriptions”.</p>

<p>``` javascript
var subscriber = (function() {</p>

<pre><code>var _listeners = {};
    
var s = {
    // Listen to a channel and call a callback when that channel fires
    listen: function(channel, cb) {
        // Add the callback to the list of listeners on the given channel
        _listeners[channel] = _listeners[channel] || [];
        _listeners[channel].push(cb);
        
        return {
            // Return an object that can be used to remove the callback from the channel
            unlisten: function() {
                // Remove the callback from the list of listeners on that channel
                _listeners[channel].splice(_listeners[channel].indexOf(cb), 1);
            }
        }
    },
    
    // Manually fire events on a given channel.
    publish: function(channel) {
        _listeners[channel] = _listeners[channel] || [];
        _listeners[channel].forEach(function(cb) {
            cb();
        });
    }
};

return s; })();
</code></pre>

<p>var h = subscriber.listen(‘update’, function() {
    console.log(‘The update event was fired!’);
});</p>

<p>subscriber.publish(‘update’); // &gt; “The update event was fired!”</p>

<p>h.unlisten();</p>

<p>subscriber.publish(‘update’); // &gt; <no output="">
```</no></p>

<p>When you have an event-driven application, like a Javascript app that performs actions based on user interaction or based on back end “pushes” to a listening front end, you often have a central “publisher” that handles firing events when certain actions occur. It makes sense to have a static <code>listen</code> function that takes a “channel” and a callback function to call when that channel gets updated. The problem comes when you have to decide how to <em>stop</em> listening to that channel. If you go with a static <code>unlisten</code> function on the publisher with the same signature as <code>listen</code> (the channel and callback), you need to keep track of which callback is listening to which channel, and it can get messy.</p>

<p>Instead, <code>listen</code> can return a <code>handle</code>, which is just an object that contains a method <code>unlisten</code> that knows exactly how to stop listening on the specific channel and with the specific callback that was given to <code>listen</code>. Then, the caller just needs to keep track of the return values of <code>listen</code> (as opposed to the <em>arguments</em> to <code>listen</code>) in order to be able to <code>unlisten</code> later.</p>

<p>The <a href="http://dojotoolkit.org/">Dojo</a> <a href="http://dojotoolkit.org/reference-guide/1.7/dojo/Stateful.html">Stateful</a> interface uses this pattern to watch values on objects. If you watch a property, a callback can be fired each time that property changes. The return value of <code>watch</code> is a handle that can be used to stop watching that particular property value.</p>

<p>Feel free to <a href="http://jsfiddle.net/tupton/nZKQz/">play around with this code on JSFiddle</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration]]></title>
    <link href="http://blog.thomasupton.com/2012/02/configuration"/>
    <updated>2012-02-18T20:43:38-06:00</updated>
    <id>http://blog.thomasupton.com/2012/02/configuration</id>
    <content type="html"><![CDATA[<p>Starting a fresh environment on a new system isn’t a very common or regular task, but when you do, it comes in handy to have a quick and easy way to do it. To help with this, I keep my <code>vim</code> <a href="https://github.com/tupton/vim-support">environment</a> and my <a href="https://github.com/tupton/dotfiles">environment dot files</a> in version control on Github.</p>

<p>I use <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> to manage my <code>vim</code> plugins. I follow the examples in <a href="http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/">this great article on plugin management with Pathogen</a> to keep most of my plugins as <code>git</code> submodules. Installing my <code>vim</code> environment is just a matter of cloning the <code>git</code> repository and symlinking my <code>vimrc</code>.</p>

<p>I just spent some time cleaning up and organizing my dotfiles.  I wasn’t even using my old dotfiles repository on GitHub, but I quickly rectified that. I now keep my dotfiles in <code>~/.dotfiles</code> and symlink them to <code>~</code>. There is a helper script in my <a href="https://github.com/tupton/dotfiles">dotfiles repository</a> that sets up these symlinks.</p>

<p>Along with the usual <code>bashrc</code>, there are a few config files that aren’t as common. My <code>ackrc</code> defines a few convenient options and ignores directories with built artifacts in them. My (old) <code>pythonrc</code> defines a tab-completion function, although this might be outdated at this point. There’s a <code>tm_properties</code> config for <a href="http://blog.macromates.com/2011/textmate-2-0-alpha/">TextMate 2</a>.</p>

<p>Hopefully the fact that my configuration is out in the open will bring to light some useful features that I probably take for granted but you might not know about. So, go explore! Check out my <code>inputrc</code>, for example. I know that I discover new things almost every time I look at someone else’s <code>vimrc</code> or <code>bashrc</code>.</p>

<p>Do you have any configuration tips or tricks? Let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Backups with Tarsnap]]></title>
    <link href="http://blog.thomasupton.com/2010/12/automated-backups-with-tarsnap"/>
    <updated>2010-12-12T20:14:08-06:00</updated>
    <id>http://blog.thomasupton.com/2010/12/automated-backups-with-tarsnap</id>
    <content type="html"><![CDATA[<p>I remember <a href="http://www.daemonology.net/blog/2006-09-13-encrypted-backup.html">reading</a> <a href="http://www.daemonology.net/blog/2008-11-10-tarsnap-public-beta.html">about</a> <a href="http://www.tarsnap.com/">Tarsnap</a> a couple of years ago, back when it was only an idea. I wasn’t too convinced about using a service that was in beta to back up my data, but I recently rediscovered that it had graduated to a full-blown product and signed up immediately.</p>

<p>Tarsnap is an encrypted backup tool based on archives. I’m not going to go into any details about the implementation, but you can read about the <a href="http://www.tarsnap.com/crypto.html">cryptography</a>, <a href="http://www.tarsnap.com/security.html">the security</a>, or anything else about the <a href="http://www.tarsnap.com/design.html">overall design</a> of the tool on the <a href="http://www.tarsnap.com/">Tarsnap site</a>. Basically, it creates archives (hence the “tar” part of the name), encrypts them, and stores them on <a href="http://aws.amazon.com/s3/">Amazon S3</a>. The “snap” part of the name refers to the idea that backups are done in “snapshots,” which means that backups are incremental and duplicate data can be shared between archives.</p>

<p>After you sign up for a Tarsnap account, put at least $5 (via Paypal) into your account, and <a href="http://www.tarsnap.com/man-tarsnap-keygen.1.html">generate a key</a>, you can begin backing up your data. You can read more about <a href="http://www.tarsnap.com/gettingstarted.html">getting started</a> and <a href="http://www.tarsnap.com/usage.html">using <code>tarsnap</code> in general</a>, but I really want to talk about automated backups with Tarsnap.</p>

<h2 id="a-simple-wrapper">A Simple Wrapper</h2>

<p>I found <a href="http://jonathanstreet.com/blog/setting-up-backups-with-tarsnap">a blog post by Jonathan Street</a> that detailed his automated backups, and that served as inspiration for my system. I wrote a little bash script to wrap <code>tarsnap</code> for my purposes:</p>

<p><code>bash
    #! /bin/bash
    echo `date +%F\ %T`: Beginning back up of $2
    /usr/local/bin/tarsnap -c -f $1-`date +%F` $2
    echo `date +%F\ %T`: Completed back up of $2
</code></p>

<p>Calling <code>tarsnap-backup.sh  </code> tells tarsnap to create an archive  of the specified directory with the given name and the current date. I was in business.</p>

<h3 id="generating-a-new-key">Generating a new key</h3>

<p>An aside: Jonathan Street’s blog post mentioned creating a new key that only had permission to read and write archives. I initially did the same thing, but for reasons I’ll get into later, I wanted the ability to delete backups, too. Generating a new key was extremely easy:</p>

<p><code>bash
    $ tarsnap-keymgmt --outkeyfile /root/tarsnap-rw.key -r -w /root/tarsnap.key
</code></p>

<p>This creates a new key in <code>/root/</code> called <code>tarsnap-rw.key</code> that only has read and write permission.</p>

<h2 id="automation">Automation</h2>

<h3 id="newsyslog"><code>newsyslog</code></h3>

<p>The simple wrapper script above was great, but if I was going to automate it, I needed those <code>echo</code> statements to go to a more permanent log file. If I was going to do daily backups of directories, I needed some sort of log management. After searching around a bit, it became clear that <code>newsyslog</code> was the way to go on OS X. Looking at the file in <code>/etc/newsyslog.conf</code> was enough to give me the basic file structure, but the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newsyslog&sektion;=8">man pages</a> go into a lot of detail.</p>

<p>I made a configuration called <code>user.conf</code> in <code>/etc/newsyslog.d/</code> and put my tarsnap logs inside. I decided to use a distinct log for each automated backup I do, as opposed to a single tarsnap log. I still haven’t decided if this is the right way to go, but I do like being able to quickly see the result of the last backup. My <code>user.conf</code> looks like the following.</p>

<pre><code>/var/log/tarsnap-backup-code.log                        640     5       1000    *       Z
/var/log/tarsnap-backup-documents.log                   640     5       1000    *       Z
</code></pre>

<p>This configuration tells <code>newsyslog</code> to gzip, roll to a new log once the current log exceeds 1MB in size, and keep at most five old logs.</p>

<h3 id="cron"><code>cron</code></h3>

<p>With log rotation in place, I could create a cron job.</p>

<pre><code>0 4 * * * /usr/local/bin/tarsnap-backup code ~/code &gt; /var/log/tarsnap-backup-code.log
</code></pre>

<p>This crontab schedules backups for my <code>code</code> directory at 4am daily and my <code>Documents</code> directory at 5am daily. I used <code>sudo crontabe -e</code> to create this because both <code>tarsnap</code> and my log file’s permissions require root privileges. This would have sufficed, but there was a nagging thought in the back of my head: I <a href="http://www.thomasupton.com/blog/2009/09/i-love-weather/">knew</a> that <code>launchd</code> is used in place of <code>cron</code> in OS X, and I thought this would give me a good opportunity to dive into even more options that <code>launchd</code> has to offer.</p>

<h3 id="launchd"><code>launchd</code></h3>

<p>Since I wanted these backups to run whenever possible, I decided to put my <code>launchd</code> backup configurations in <code>/Library/LaunchDameons</code> instead of <code>/Library/LaunchAgents</code>. LaunchDaemons are able to run without a logged-in user; this is exactly what I wanted. The <code>launchd</code> configuration for my <code>code</code> backup looks like the following:</p>

<p><code>html
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN"
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;com.thomasupton.backup-daily-code&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;/usr/local/bin/tarsnap-backup&lt;/string&gt;
            &lt;string&gt;code&lt;/string&gt;
            &lt;string&gt;/Users/thomas/code&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;GroupName&lt;/key&gt;
        &lt;string&gt;wheel&lt;/string&gt;
        &lt;key&gt;UserName&lt;/key&gt;
        &lt;string&gt;root&lt;/string&gt;
        &lt;key&gt;Nice&lt;/key&gt;
        &lt;integer&gt;1&lt;/integer&gt;
        &lt;key&gt;StandardErrorPath&lt;/key&gt;
        &lt;string&gt;/var/log/tarsnap-backup-code.log&lt;/string&gt;
        &lt;key&gt;StandardOutPath&lt;/key&gt;
        &lt;string&gt;/var/log/tarsnap-backup-code.log&lt;/string&gt;
        &lt;key&gt;StartCalendarInterval&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Hour&lt;/key&gt;
            &lt;integer&gt;5&lt;/integer&gt;
            &lt;key&gt;Minute&lt;/key&gt;
            &lt;integer&gt;0&lt;/integer&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
    &lt;/plist&gt;
</code></p>

<p>The <code>ProgramArguments</code> section is exactly how I called the backup script from <code>cron</code>. The <code>UserName</code> and <code>GroupName</code> keys are important: they tell <code>launchd</code> to run the backup script as root, which, as I mentioned before, is necessary for using <code>tarsnap</code> and for appending to the log file. The <code>StandardErrorPath</code> and <code>StandardOutPath</code> keys tell <code>launchd</code> to redirect output to the proper log file. The <code>StartCalendarInterval</code> tells <code>launchd</code> to run this script at 5am daily.</p>

<p>After registering the configuration via <code>launchctl load /Library/LaunchDaemons/com.thomasupton.backup-daily-documents.plist</code>, my automated backup system was in place.</p>

<h2 id="backup-management">Backup Management</h2>

<p>Since Tarsnap backs up data with the notion of “snapshots” and keeps track of blocks of data (and not archive data), keeping multiple archives of the same data doesn’t make much sense. However, running a daily backup by creating a new archive would mean that many archives would build up fast. I decided that keeping at most three previous backups of the same data would suffice. I wanted to automate this, too. This is the reason I decided not to use a read-write-only key.</p>

<p>I added the following lines to my <code>tarsnap-backup.sh</code> script.</p>

<p><code>bash
    # Remove the backup from three days previous, if there is one
    echo `date +%F\ %T`: Removing backup of $2 from `date -v-3d +%F`
    /usr/local/bin/tarsnap -d -f $1-`date -v-3d +%F`
    echo `date +%F\ %T`: Completed removing backup of $2 from `date -v-3d +%F`
</code></p>

<p>The key to this is the date in the archive name passed to <code>tarsnap -d</code>. <code>date -v</code> lets you add a value to the date output, so <code>-v-3d</code> outputs the date from three days previous. Now, every scheduled backup attempts to delete the archive from three days ago in addition to creating a backup for the current day. Of course, if a backup is missed, this can lead to an accumulation of old archives. This is where the log files come in handy: I can just inspect the logs every couple of days to see what successfully ran and manually prune the archive list if necessary.</p>

<h3 id="large-backups">Large Backups</h3>

<p>I said “if a backup is missed,” but I didn’t mention why that might occur. The answer becomes apparent when you start talking about backing up large amounts of data. My <code>~/Documents</code> folder was over 12GB, and with my terrible upload speeds, that would mean that it would take a long, long time to upload everything. Even though I was able to prune the contents of <code>~/Documents</code> down to 6.5GB, I still needed more than an hour to back it up. <code>tarsnap</code> doesn’t perform more than one archive transaction at once, so if the <code>documents</code> archive was still running when the <code>code</code> archive process began, tarsnap would cancel the latter and continue with the former, hence a backup is missed. This is also another reason that I decided to keep separate log files for each backup job. The log lines for an in-progress job aren’t interspersed with a failed attempt to start another backup job.</p>

<p>The <code>documents</code> backup was still too large to have been done by the morning, and I didn’t really want to sacrifice my network connection just for the sake of a backup. Fortunately, <code>tarsnap</code> supports archive truncation. According to the <a href="http://www.tarsnap.com/man-tarsnap.1.html">man pages</a>, <code>tarsnap</code> responds to the <code>SIGQUIT</code> interrupt by truncating the archive and appending “<code>.part</code>” to the archive name. When my large backup job was still running, all I had to do was send the <code>SIGQUIT</code> signal with <code>kill -3</code> (alternatively, you could send <code>^Q</code> if you use <code>tarsnap</code> from a console and not from a scheduled job) and <code>tarsnap</code> would effectively “pause” the backup. The next time that same data is archived, <code>tarsnap</code> will recognize it and only upload new data. This works even with a different archive name, thanks to snapshots and block data.</p>

<h2 id="restoring-backups">Restoring Backups</h2>

<p>Tarsnap is a great service, but truly for those who know what they are doing. It took me far longer than I would like to admit to come up with a process for all of this, but it was worth it. Of course, creating backups is only one part of a complete system. The other, more important part, is restoration. Since <code>tarsnap</code> is built on <code>tar</code> and <code>libarchive</code>, this is incredibly simple. <code>tarsnap -x</code> extracts archives, and <code>tarsnap -r</code> writes a tar stream to <code>stdout</code>, which can be used to create a local tar.</p>

<p>If you like the idea of easy, encrypted backups, tarsnap is a great service. It’s cheap, secure, and reliable, plus it’s fun and easy to use if you’re comfortable with UNIX-style archiving tools.</p>
]]></content>
  </entry>
  
</feed>
