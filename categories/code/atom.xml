<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Uptonian Thoughts]]></title>
  <link href="http://blog.thomasupton.com/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.thomasupton.com/"/>
  <updated>2014-10-07T19:27:45-05:00</updated>
  <id>http://blog.thomasupton.com/</id>
  <author>
    <name><![CDATA[Thomas Upton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating from Pathogen to Vundle]]></title>
    <link href="http://blog.thomasupton.com/2014/02/migrating-from-pathogen-to-vundle"/>
    <updated>2014-02-11T19:41:00-06:00</updated>
    <id>http://blog.thomasupton.com/2014/02/migrating-from-pathogen-to-vundle</id>
    <content type="html"><![CDATA[<p>For <a href="http://blog.thomasupton.com/2012/02/configuration/">a while now</a>, I’ve been using <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> to manage my <code>vim</code> plugins as bundles. I thought I was making things easier for myself by <a href="http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/">using <code>git</code> submodules to help organize those plugins</a>, but submodules aren’t the best method for deploying a <code>vim</code> environment in multiple places.</p>

<p>Fortunately for me, other, smarter people did this same thing and decided to fix it. This <a href="http://jameslaicreative.com/moving-up-upgrading-from-pathogen-to-vundle/">blog post by James Lai</a> details moving from almost the exact same system as mine to <a href="https://github.com/gmarik/vundle">Vundle</a>, a newer and very <code>vim</code>-centric way of managing plugins. You list your plugins in your <code>vimrc</code>, you update them with <code>vim</code> (even though they are managed with <code>git</code>), and your <code>vim</code> environment is consistent everywhere.</p>

<p>I just migrated from Pathogen to Vundle, and I want to document the process.</p>

<p>First things first: clone Vundle into your <code>bundle/</code> directory.</p>

<p><code>bash
❯ git clone https://github.com/gmarik/Vundle.vim.git bundle/Vundle.vim
</code></p>

<p>The <a href="https://github.com/gmarik/Vundle.vim#quick-start">Vundle quick start guide</a> does a great job of getting you started, so if you’re just looking to use Vundle without any prior bundle management, I would start there. If you were managing your <code>vim</code> plugins with Pathogen and <code>git</code> submodules, the switch to Vundle is straightforward but requires a few more steps.</p>

<p>At the top of <a href="https://github.com/tupton/vim-support/blob/master/vimrc">my <code>vimrc</code></a> I added a new Vundle-specific section and added the code from the quick start guide.</p>

<p>``` vim
“ Of course
set nocompatible</p>

<p>” Required Vundle setup
filetype off
set runtimepath+=~/.vim/bundle/vundle
call vundle#rc()</p>

<p>Bundle ‘gmarik/vundle’</p>

<p>```</p>

<p>Next, I wanted to add all the bundles I already use. <code>git submodule foreach</code> can actually help here.</p>

<p>``` bash
❯ git submodule foreach git remote -v
Entering ‘bundle/airline’
origin  https://github.com/bling/vim-airline.git (fetch)
origin  https://github.com/bling/vim-airline.git (push)
Entering ‘bundle/characterize’
origin  https://github.com/tpope/vim-characterize.git (fetch)
origin  https://github.com/tpope/vim-characterize.git (push)</p>

<p>[…]
```</p>

<p>I then just copied the GitHub user and repository name (the path portion of the remote URL minus “.git”) and passed that to Vundle’s <code>Bundle</code> command.</p>

<p>``` vim
“ Better status line
Bundle ‘bling/vim-airline’</p>

<p>” ga for character descriptions
Bundle ‘tpope/vim-characterize’</p>

<p>[…]
```</p>

<p>Now we need to remove the existing submodules. One of the big pains of using <code>git</code> submodules is removing them when you no longer need them. This made trying out plugins harder than it needed to be, and it makes the transition to Vundle a bit more complicated.</p>

<p>I reference <a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule">this Stack Overflow post about removing <code>git</code> submodules</a> every time I need to remove a plugin I was just trying out without fail. The command to remember is <code>git submodule deinit</code>. You can <code>deinit</code> all submodules in a given directory all at once.</p>

<p>``` bash
❯ git submodule deinit bundle/
Cleared directory ‘bundle/airline’
Submodule ‘bundle/airline’ (https://github.com/bling/vim-airline.git) unregistered for path ‘bundle/airline’
Cleared directory ‘bundle/characterize’
Submodule ‘bundle/characterize’ (https://github.com/tpope/vim-characterize.git) unregistered for path ‘bundle/characterize’</p>

<p>[…]
```</p>

<p>Then you need to explicitly remove all the bundles. Since Vundle is already in <code>bundle/vundle</code>, we need to remove each separate plugin bundle directory instead of blowing away the entire <code>bundle/</code> directory.</p>

<p>``` bash
❯ git rm bundle/airline bundle/characterize […]
rm ‘bundle/airline’
rm ‘bundle/characterize’</p>

<p>[…]
```</p>

<p>It woud be a good idea to commit your staged changes here, which at this point should just be submodule removal.</p>

<p>If you were using Pathogen, don’t forget to remove any setup from your <code>vimrc</code>.</p>

<p>``` vim
“ Store pathogen itself in bundle/
runtime! bundle/pathogen/autoload/pathogen.vim</p>

<p>” Start it up
silent! call pathogen#infect()
silent! call pathogen#helptags()
```</p>

<p>It also helps to add <code>bundle/</code> to your <code>.gitignore</code>. Vundle now puts all plugins there, but you don’t have to manually manage them any more.. Just add <code>bundle/**</code> to your <code>vim</code> environment’s <code>.gitignore</code> file.</p>

<p>Now, open up <code>vim</code> and run <code>:BundleInstall</code>. All your <code>vim</code> bundles will be cloned and managed by Vundle, and you don’t have to worry about updating submodules and running <code>git submodule foreach</code> everywhere you have a <code>vim</code> environment.</p>

<p>To update and migrate any existing <code>vim</code> environments on other machines, <code>git pull</code> in the migration changes, which shouldn’t conflict as long as you were up to date to the commit before the migration. Then clone Vundle with <code>git clone https://github.com/gmarik/Vundle.vim.git bundle/vundle</code> and install your plugins with <code>vim +BundleInstall +qall</code>.</p>

<p>If you <em>were not</em> up to date to right before your migration changes, you’ll probably have to manually remove all submodules by following the instructions above and resolve some conflicts when pulling changes in. Since you’re trying to delete all of <code>bundle/</code>, this should be relatively painless: just delete <code>bundle/</code> and <code>git rebase --skip</code> any submodule update commits.</p>

<p>And now you’re using Vundle! Add some new bundles into your <code>vimrc</code>, run <code>:BundleInstall</code>, and you’re up and running. I found some that I’m going to try out in <a href="https://gist.github.com/joegoggins/8482408">joegoggins’s vimrc</a> and in <a href="https://github.com/gmarik/Vundle.vim#quick-start">the Vundle setup documentation</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly convert Unix timestamps]]></title>
    <link href="http://blog.thomasupton.com/2013/10/quickly-convert-unix-timestamps"/>
    <updated>2013-10-20T10:03:00-05:00</updated>
    <id>http://blog.thomasupton.com/2013/10/quickly-convert-unix-timestamps</id>
    <content type="html"><![CDATA[<p>Inevitably, when dealing with time-related data, one will come across Unix timestamps. They’re
great; there’s no guessing the timezone or trying to parse difficult formats and they’re generally
extremely useful.</p>

<p>Except they’re not very readable to humans. I use <a href="http://www.epochconverter.com/">Epoch Converter</a> <em>a lot</em> when I’m dealing
with time-series data, which seems to be fairly often recently. Anything involving a calendar or
picking a time range also usually involves timestamps. I thought there must be an easier way to
convert these into something that I can read without going to an external site and that doesn’t
break down when I’m trying to do work with finnicky or non-existant network connection.</p>

<p>There is:</p>

<p><code>bash
date -j -f "%s" "1381528800" +"%a %b %d %T %Z %Y"
</code></p>

<p>An explanation: <code>-j</code> tells <code>date</code> not to try to set the system date. <code>-f</code> describes the format of
the input - a timestamp, of course - and the input itself follows. The string after <code>+</code> is the
output format. The output of the above is as follows.</p>

<pre><code>Fri Oct 11 17:00:00 CDT 2013
</code></pre>

<p>You can use <code>xargs</code> to pipe input in. Note that the <code>-J</code> option might be different on systems that
are not OS X.</p>

<p><code>bash
echo -n "1381528800" | xargs -J {} date -j -f "%s" {} +"%a %b %d %T %Z %Y"
</code></p>

<p>Like I seem to do with a lot of my utility scripts, I added a workflow to Alfred. You can <a href="https://dl.dropboxusercontent.com/u/5753691/Convert%20timestamp%20to%20date.alfredworkflow">get it
here</a>. Simply invoke Alfred, type “ts” followed by a space and the timestamp you want to
convert. The readable date will be posted as a notification (Growl or Notification Center,
configurable in the Advanced section of the Alfred settings) and copied to the clipboard.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove leading whitespace]]></title>
    <link href="http://blog.thomasupton.com/2013/10/remove-leading-whitespace"/>
    <updated>2013-10-13T14:28:00-05:00</updated>
    <id>http://blog.thomasupton.com/2013/10/remove-leading-whitespace</id>
    <content type="html"><![CDATA[<p>Sometimes it’s useful to copy some code from a file and paste it somewhere else as an example. For
instance, I like to write code in a <a href="http://jsfiddle.net/">jsfiddle</a> and then paste a relevant subset of that
code to a <a href="http://stackoverflow.com/">Stack Overflow</a> answer. I have also copied code from a project file to paste into
HipChat to quickly explain something to a coworker, or to paste into a JIRA ticket as a comment.</p>

<p>If you copy code from the middle of a file, there’s usually some leading whitespace on all lines
that you do not want to preserve in the context into which you are pasting the code. The problem is
that you don’t want to get rid of <em>all</em> leading whitespace on <em>all</em> lines; you want to keep the
indentation intact. I usually get rid of the unwanted whitespace by manually deleting it
if it’s only one or two lines or by pasting into a new <code>vim</code> buffer and using <code>&lt;&lt;</code> to shift the text
over as much as desired.</p>

<p>To illustrate, I have this text:</p>

<p>``` javascript
        var flatten = function(result, next_array) {
            console.log(‘current result’, result);
            return result.concat(next_array);
        };</p>

<pre><code>    [1, [2], [3, 4]]
        .reduce(flatten, []); ```
</code></pre>

<p>and I want this text:</p>

<p>``` javascript
    var flatten = function(result, next_array) {
        console.log(‘current result’, result);
        return result.concat(next_array);
    };</p>

<pre><code>[1, [2], [3, 4]]
    .reduce(flatten, []); ```
</code></pre>

<h2 id="remove-leading-whitespace">Remove leading whitespace</h2>

<p>I knew there must be a way to remove the shortest leading whitespace from all lines
programmatically, but I’m not familiar enough with <code>awk</code>, <code>sed</code>, or shell scripting in general to
tackle the problem. I <a href="http://stackoverflow.com/questions/19328975/remove-shortest-leading-whitespace-from-all-lines/19332908">asked the question on Stack Overflow</a> and got a few great answers. I
ended up accepting <a href="http://stackoverflow.com/questions/19328975/remove-shortest-leading-whitespace-from-all-lines/19332908#19332908">the single process <code>awk</code> version</a>.</p>

<p>If you use OS X, the built-in <code>awk</code> will not work with the given solution. If you use
<a href="http://brew.sh/">Hombrew</a>, fixing that is just a simple matter of <code>brew install gawk</code> and using <code>gawk</code> instead
of <code>awk</code>.</p>

<p>The given solution has a great explanation and works fine, but I made one addition. If the input is
a single line with <em>no</em> leading whitespace, the script fails. I fixed this with <code>if (!s) s=0;</code> at
the beginning of the <code>END</code> block.</p>

<p>The final version of my command looks like this. I’ve added some comments to explain what’s going
on.</p>

<p>``` bash
    gawk  -F ‘\S.*’ \              # The awk field separator is everything after the first non-whitespace character, inclusive
    ‘{                              # The first block of the awk program
        l=length($1);               # The length of the first field, the leading whitespace
        if(l&gt;0)                     # If the length of whitespace is non-zero,
            if(NR==1)               # and this is the first record,
                s=l;                # make ‘s’, the number of whitespace characters, equal to its length
        else s=s&gt;l?l:s;             # otherwise, make s the shorter of itself and the current whitespace
        a[NR]=$0                    # Index the entire line in an array by line number
    }                               # End of the first block of the awk program</p>

<pre><code>END{                            # Start the END, printing block of the awk program
    if(!s)s=0;                  # Make sure we always have a value for s
    for(i=1;i&lt;=NR;i++){         # Loop over all records
        sub("^ {"s"}","",a[i]); # Substitute 's' whitespace characters with nothing
        print a[i];             # Print the line after substition
    }                           # End of the loop over records
}'                              # End of the END block of the awk program ```
</code></pre>

<p>It is worth noting that this probably only works on text with spaces for whitespace, not
tabs or mixed whitespace.</p>

<h2 id="integrate-with-an-alfred-workflow">Integrate with an Alfred workflow</h2>

<p>The ability to remove the shortest leading whitespace with a shell command is great, but I really
wanted a way to do this quickly with text on the clipboard. <a href="http://support.alfredapp.com/workflows">Alfred workflows</a> make that
possible.</p>

<p>I created a simple three step workflow with a hotkey trigger, a script action, and a clipboard
output. You can <a href="https://dl.dropboxusercontent.com/u/5753691/Paste-shifted-text.alfredworkflow">download it here</a> and use it with Alfred 2.</p>

<p>And now you can copy code in context and paste it with no leading whitespace wherever you want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch Deleting Last.fm Scrobbles]]></title>
    <link href="http://blog.thomasupton.com/2012/08/batch-deleting-last-fm-scrobbles"/>
    <updated>2012-08-12T20:06:00-05:00</updated>
    <id>http://blog.thomasupton.com/2012/08/batch-deleting-last-fm-scrobbles</id>
    <content type="html"><![CDATA[<p>I recently came home from a trip and synced my iPhone in iTunes in an attempt to scrobble the music
that I listened to on that trip. I use <a href="http://meloapp.com/faq/">Melo</a> to scrobble tracks played in iTunes, and it usually
works quite well because I never know it’s there.</p>

<p>I’m not entirely sure if Melo, iTunes, or <a href="http://last.fm/">Last.fm</a> is to blame, but I ended up with a large amount of
scrobbles from a repeated handful of songs. I have over 75,000 tracks scrobbled in Last.fm, but I
use their recommendations and like to look at my stats, so artificially inflating my scrobble
count with three artists was extremely undesirable.</p>

<p>I had 59 pages of unwanted scrobbles; I needed to quickly delete nearly 3000 scrobbles. Last.fm
doesn’t have a way to batch delete (or otherwise manage) your scrobble tracks, so I manually clicked
all the delete links on the first page.</p>

<p>That got old before I had even deleted ten scrobbles. I figured out a way to programmatically and
quickly delete a page of scrobbles. I still have to manually get to each page, but this makes it
much easier.</p>

<p><code>javascript
    jQuery('#deletablert a.delete').each(function(_, a) {
        a.click();
    });
</code></p>

<p>I just open up the console with <code>⌘-⌥-I</code>, paste in that snippet of code, and hit enter. Here is what
it looks like in action.</p>

<p><img src="http://farm9.staticflickr.com/8282/7770297078_73fafc7541_o_d.png" alt="Batch deleting Last.fm scrobbles." title="Last.fm Batch Delete" /></p>

<p>Since <a href="http://jquery.com/">jQuery</a> is already embedded in Last.fm’s pages, I just select all the delete links and
emit a click on each one. The entire page is deleted in a few seconds. When it’s done, I can click
the link to the previous page and repeat.</p>

<p>I don’t expect this will be very useful to anyone but myself for the next ten minutes, but it could
come in handy in case you’ve been listening to too much Carly Rae Jepsen.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntastic]]></title>
    <link href="http://blog.thomasupton.com/2012/05/syntastic"/>
    <updated>2012-05-20T14:13:08-05:00</updated>
    <id>http://blog.thomasupton.com/2012/05/syntastic</id>
    <content type="html"><![CDATA[<p>I love writing with <code>vim</code>, but — for many valid reasons — some people are averse to it. I think the
steep (–ish) learning curve has something to do with it, but I think some people really don’t want
to give up their IDE. The thing is, <code>vim</code> isn’t <em>just</em> a text editor. You can extend it to do pretty
much anything, including features that normally show up in IDEs.</p>

<p>I recently started using <a href="https://github.com/scrooloose/syntastic">syntastic</a>, which is a <code>vim</code> plugin that runs linters or syntax checkers
and displays warnings and errors right in your window. IDEs like Eclipse or Xcode provide this
syntax-checking for a couple of languages, but syntastic supports many languages and linters out of
the box with pluggable support for nearly any language.</p>

<h2 id="setup">Setup</h2>

<p>If you use <a href="https://github.com/tpope/vim-pathogen">pathogen</a> like every sane <code>vim</code> user does, installing syntastic is just like any other
plugin. Clone the repository or create a submodule in <code>bundle/syntastic</code> and you’re ready to go.</p>

<p>I mainly work with Javascript, Python, HTML, and CSS, so that’s what I’ll talk about. It’s worth
checking out the syntax checkers in <code>bundle/syntastic/syntax_checkers/</code>, even if you just look at
the list of files there. You might have to dive into the files to figure out which linters are
actually supported as it’s not clearly documented.</p>

<p>Before we get to configuring individual syntax checkers, syntastic itself has a couple of
configuration options. Syntastic has what it refers to as a “mode map”, which is basically just a
way to configure which file types are checked. Here is the relevant config option from <a href="https://github.com/tupton/vim-support/blob/master/vimrc#L302">my
vimrc</a>:</p>

<p><code>vim
	" On by default, turn it off for html
	let g:syntastic_mode_map = { 'mode': 'active',
		\ 'active_filetypes': [],
		\ 'passive_filetypes': ['html'] }
</code></p>

<p>The ‘mode’ option set to active means that syntastic is on by default, so we can leave the list of
‘active_filetypes’ empty. The ‘passive_filetypes’ names filetypes that syntastic does not attempt to
check. I don’t check HTML files because I mainly work with templates that either can’t or won’t
validate with most HTML syntax checkers. If templates use non-standard attributes, it’s hard for a
syntax checker to do its job.</p>

<h3 id="python">Python</h3>

<p>Setting up syntastic for use with python was extremely easy. Just install <a href="http://pypi.python.org/pypi/pyflakes">pyflakes</a> with
<code>pip install pyflakes</code> and set up some related options. I ignore certain errors regarding
whitespace, indentation, and end-of-line backslashes, but those are all customizable. See the <a href="http://pep8.readthedocs.org/en/latest/intro.html#error-codes">pep8
error code documentation</a> for an explanation of the error codes.</p>

<p><code>vim
    " Use flake8
    let g:syntastic_python_checkers = ['flake8']
    let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801"'
</code></p>

<h3 id="javascript">Javascript</h3>

<p>There are a number of Javascript linters, including <a href="http://www.jslint.com/">JS Lint</a> and Google’s <a href="https://developers.google.com/closure/utilities/">Closure
linter</a>, but I decided to use the communtiy-driven <a href="http://www.jshint.com/">JS Hint</a>.  JS Hint can be
configured with a jshintrc, which just is a JSON object that contains options. There are two
categories of options: those that enforce stricter rules than the defaults and those that relax
default checks. The <a href="http://www.jshint.com/options/">options page of the jshint website</a> does a great job of
explaining each option. You can <a href="https://github.com/tupton/dotfiles/blob/master/jshintrc">view my jshintrc on my Github page</a>. I added a few
“enforcing” options, but the only “relaxing” option I use is <code>sub</code>, which allows
subscript notation when accessing properties, e.g. <code>this['domNode']</code> as well as <code>this.domNode</code>.</p>

<p>You can tell syntastic to use jshint with the following config option:</p>

<p><code>vim
" Use jshint (uses ~/.jshintrc)
let g:syntastic_javascript_checkers = ['jshint']
</code></p>

<h2 id="usage">Usage</h2>

<p><img src="http://farm8.staticflickr.com/7085/7235544916_6f48ae8f45_o_d.png" alt="syntastic and underscore.js" /></p>

<p>By default, syntastic runs your file through the configured filetype’s linter whenever the buffer is
written. If there are errors, they are highlighted inline. When your cursor is on a line with an
error, the description of the error is visible in the status line. You can use the <code>:Errors</code> command
to open a quickfix window with a list of all errors in the file. Pressing enter on an error will
take you to that line in the file. Syntastic uses <a href="http://vimdoc.sourceforge.net/htmldoc/sign.html">vim’s signs</a>, which means that a
gutter with a sign appears on the left side of every line with an error on it, making it easy to
scan the buffer for errors. You can change these symbols with some syntastic options.</p>

<p><code>vim
    " Better :sign interface symbols
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '!'
</code></p>

<p>You can configure syntastic in many other ways, including telling it to check a buffer whenever it
is opened. I explored the help file (<code>:help syntastic</code>) when I first started using syntastic, and it
was incredibly helpful. I encourage anyone who uses syntastic to do the same.</p>

<p>Syntastic has already helped me avoid many typos and silly errors that would ordinarily be hard to
track down. It’s an invaluable tool in my workflow.</p>
]]></content>
  </entry>
  
</feed>
