<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webapps | Uptonian Thoughts]]></title>
  <link href="http://blog.thomasupton.com/categories/webapps/atom.xml" rel="self"/>
  <link href="http://blog.thomasupton.com/"/>
  <updated>2015-09-01T17:55:21-05:00</updated>
  <id>http://blog.thomasupton.com/</id>
  <author>
    <name><![CDATA[Thomas Upton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mint]]></title>
    <link href="http://blog.thomasupton.com/2012/04/mint"/>
    <updated>2012-04-17T18:37:38-05:00</updated>
    <id>http://blog.thomasupton.com/2012/04/mint</id>
    <content type="html"><![CDATA[<p><img src="http://farm8.staticflickr.com/7180/7089520649_0beff76701_o_d.png" alt="Mint" /></p>

<p>I just started using <a href="http://haveamint.com/">Mint</a> to track statistics on my site. I’ve been using Google Analytics for a long time, and I will continue to do so, but it is definitely geared more towards sites trying to earn money. Mint seemed to offer a more streamlined and customizable interface for people who just want to look at stats.</p>

<p>Mint is a pluggable, extensible stats system. Mint modules are known as “peppers,” and each one provides some small functionality. There is a <a href="http://www.haveamint.com/peppermill/pepper/4/default/">default pepper</a> that provides some basic stats functionality like page views, unique visitors, search terms that brought those visitors to your site, and which pages they are looking at. There are a large number of official and community peppers over at the Peppermill that offer much more functionality and statistical views.</p>

<h2 id="installation">Installation</h2>

<p>Installing Mint was a breeze. I just followed the simple instructions and I was good to go. If you have unfettered access to your server (via <code>ssh</code>) you should have no issues.</p>

<h3 id="issues-with-modpagespeed">Issues with mod_pagespeed</h3>

<p>I did run into a couple strange display issues when I went to view my Mint stats. Each pane took up the maximum width when it was opened. Even though I could view all my stats, the interface didn’t look good. After posting in the forum and fruitlessly trying to edit the Mint source code, I disabled <a href="http://code.google.com/speed/page-speed/docs/module.html"><code>mod_pagespeed</code></a> on the hunch that my code changes weren’t taking effect because <code>mod_pagespeed</code> was caching everything. All of a sudden, the Mint interface looked fine, and it turned out that my small tweaks didn’t really make much of a difference after all. I still haven’t figured out exactly why <code>mod_pagespeed</code> was causing issues, but disabling it sure did fix them. If anyone has any insight into this, please let me know.</p>

<h2 id="peppers">Peppers</h2>

<p>I mentioned that Mint is pluggable and extensible. In fact, that is its entire basis: every bit of functionality is provided by modular plugins called peppers. Mint comes with the default pepper that I mentioned before, but there are many more available. I use a number of them.</p>

<h3 id="backuprestorebackup"><a href="http://www.haveamint.com/peppermill/pepper/5/backup_restore/">Backup/Restore</a></h3>

<p>This pepper is self-explanatory: back up and restore your Mint stats. That’s it.</p>

<h3 id="iphoneiphone"><a href="http://www.haveamint.com/peppermill/pepper/57/iphone/">iPhone</a></h3>

<p>The default Mint interface isn’t that great for a smaller screen like the iPhone, so this pepper displays an optimized interface when you view Mint on an iPhone.</p>

<h3 id="outboundoutbound"><a href="http://www.haveamint.com/peppermill/pepper/60/outbound/">Outbound</a></h3>

<p>A lot of analytics apps try to show you where your visitors come from, and that information is important. You might be interested in where your visitors go next, so this pepper shows your most popular outbound links.</p>

<h3 id="user-agent-007user-agent"><a href="http://www.haveamint.com/peppermill/pepper/7/user_agent_007/">User Agent 007</a></h3>

<p>This cleverly-named pepper shows a breakdown of your visitors by user agent.</p>

<h3 id="real-estatereal-estate"><a href="http://www.haveamint.com/peppermill/pepper/9/real_estate/">Real Estate</a></h3>

<p>This one shows a breakdown of your visitors by the size of their screen.</p>

<h3 id="local-searcheslocal-search"><a href="http://www.haveamint.com/peppermill/pepper/6/local_searches/">Local Searches</a></h3>

<p>If your blogging software has a search mechanism, this pepper shows you what your visitors are searching for. Note that this is different than the search engine queries that bring visitors to your site that the default pepper shows. </p>

<h3 id="doorbelldoorbell"><a href="http://www.haveamint.com/peppermill/pepper/45/doorbell/">Doorbell</a></h3>

<p>When you’re viewing your Mint interface, the doorbell pepper provides a some audio feedback when you get a new visitor.</p>

<h3 id="errorserrors"><a href="http://www.haveamint.com/peppermill/pepper/92/errors/">Errors</a></h3>

<p>This pepper shows any error pages that your visitors may have seen, along with the page that was requested that caused that error.</p>

<h3 id="locationslocations"><a href="http://www.haveamint.com/peppermill/pepper/29/locations/">Locations</a></h3>

<p>This pepper provides a breakdown of your visitors by geographic location.</p>

<h3 id="sparkssparks"><a href="http://www.haveamint.com/peppermill/pepper/67/sparks/">Sparks!</a></h3>

<p>Sparklines provide a great way to view useful trends in a small space. This combined with the iPhone pepper makes checking visitor trends on the go a snap.</p>

<p>I use both Google analytics and Mint on my site, but I find myself looking at Mint much, much more often. It just offers a better view into the kind of people visiting your site, especially if you’re coming from a position of trying to understand what kind of content brings them to your site in the first place. Mint comes highly recommended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Handle Pattern]]></title>
    <link href="http://blog.thomasupton.com/2012/03/the-handle-pattern"/>
    <updated>2012-03-25T13:12:06-05:00</updated>
    <id>http://blog.thomasupton.com/2012/03/the-handle-pattern</id>
    <content type="html"><![CDATA[<p>I’m not entirely sure if there’s a better name for this pattern that already exists, but I like “handle pattern” to describe this method of keeping track of and managing “subscriptions”.</p>

<p>&#8220;` javascript
    var subscriber = (function() {</p>

<pre><code>    var _listeners = {};
        
    var s = {
        // Listen to a channel and call a callback when that channel fires
        listen: function(channel, cb) {
            // Add the callback to the list of listeners on the given channel
            _listeners[channel] = _listeners[channel] || [];
            _listeners[channel].push(cb);
            
            return {
                // Return an object that can be used to remove the callback from the channel
                unlisten: function() {
                    // Remove the callback from the list of listeners on that channel
                    _listeners[channel].splice(_listeners[channel].indexOf(cb), 1);
                }
            }
        },
        
        // Manually fire events on a given channel.
        publish: function(channel) {
            _listeners[channel] = _listeners[channel] || [];
            _listeners[channel].forEach(function(cb) {
                cb();
            });
        }
    };
    
    return s;
})();
    
var h = subscriber.listen('update', function() {
    console.log('The update event was fired!');
});

subscriber.publish('update'); // &gt; "The update event was fired!"

h.unlisten();
    
subscriber.publish('update'); // &gt; &lt;no output&gt; ```
</code></pre>

<p>When you have an event-driven application, like a Javascript app that performs actions based on user interaction or based on back end “pushes” to a listening front end, you often have a central “publisher” that handles firing events when certain actions occur. It makes sense to have a static <code>listen</code> function that takes a “channel” and a callback function to call when that channel gets updated. The problem comes when you have to decide how to <em>stop</em> listening to that channel. If you go with a static <code>unlisten</code> function on the publisher with the same signature as <code>listen</code> (the channel and callback), you need to keep track of which callback is listening to which channel, and it can get messy.</p>

<p>Instead, <code>listen</code> can return a <code>handle</code>, which is just an object that contains a method <code>unlisten</code> that knows exactly how to stop listening on the specific channel and with the specific callback that was given to <code>listen</code>. Then, the caller just needs to keep track of the return values of <code>listen</code> (as opposed to the <em>arguments</em> to <code>listen</code>) in order to be able to <code>unlisten</code> later.</p>

<p>The <a href="http://dojotoolkit.org/">Dojo</a> <a href="http://dojotoolkit.org/reference-guide/1.7/dojo/Stateful.html">Stateful</a> interface uses this pattern to watch values on objects. If you watch a property, a callback can be fired each time that property changes. The return value of <code>watch</code> is a handle that can be used to stop watching that particular property value.</p>

<p>Feel free to <a href="http://jsfiddle.net/tupton/nZKQz/">play around with this code on JSFiddle</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uptonian Thoughts on Twitter]]></title>
    <link href="http://blog.thomasupton.com/2012/01/uptonian-thoughts-on-twitter"/>
    <updated>2012-01-04T22:50:51-06:00</updated>
    <id>http://blog.thomasupton.com/2012/01/uptonian-thoughts-on-twitter</id>
    <content type="html"><![CDATA[<p>You can now follow <a href="http://twitter.com/uptonin">Uptonian Thoughts on Twitter</a>! I’m using the <a href="http://somadesign.ca/2011/lessn-shortlinks-wordpress-plugin/">Lessn Shortlinks</a> and <a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a> Wordpress plugins to tweet my posts to @uptonin.</p>

<p>I might still occasionally link to my own posts on my @thomasupton account, but all posts and articles, along with information about the site, will be available on @uptonin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessn]]></title>
    <link href="http://blog.thomasupton.com/2012/01/lessn"/>
    <updated>2012-01-04T22:37:07-06:00</updated>
    <id>http://blog.thomasupton.com/2012/01/lessn</id>
    <content type="html"><![CDATA[<p>I recently installed <a href="http://shauninman.com/archive/2009/08/17/less_n">Lessn</a> and then <a href="http://lessnmore.net/">Lessn More</a> to take control of my own short links. Lessn is a very simple URL shortener that is hosted on my own domain.</p>

<p>I registered <a href="http://upton.in/">upton.in</a> to serve my short links. I chose the “.in” TLD because it’s short and common. I do wish there was an “.on” TLD so I could register <em>upt.on</em>, but I like the connotation of “in”. As <a href="https://twitter.com/thomasupton/status/154218836722335745">I said on Twitter the other day</a>, it can mean “Internet, inside, come in, infinity, interesting” among other things. </p>

<p>Lessn also integrates nicely with <a href="http://haveamint.com/">Mint</a>, which I recently started using. I plan to write more on that shortly.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unplayed]]></title>
    <link href="http://blog.thomasupton.com/2012/01/unplayed"/>
    <updated>2012-01-02T19:23:21-06:00</updated>
    <id>http://blog.thomasupton.com/2012/01/unplayed</id>
    <content type="html"><![CDATA[<p>Santa brought me <a href="http://www.amazon.com/gp/product/B002BSC54I/ref=as_li_tf_tl?ie=UTF8&tag;=thomupto-20&linkCode;=as2&camp;=1789&creative;=9325&creativeASIN;=B002BSC54I">The Legend of Zelda: Skyward Sword</a> for Christmas (thanks Mom!). I’ve enjoyed playing it, just as I’ve enjoyed playing video games for nearly my entire life.</p>

<p>In recent years, however, I’ve abandoned or not fully played all of my video games. I attempted to maintain a Google Docs spreadsheet to keep track of my unplayed games, but it quickly became more neglected than the games themselves.</p>

<p>I recently found out about Shaun Inman’s <a href="http://www.shauninman.com/archive/2011/04/18/unplayed"><em>Unplayed</em></a>, and it seemed perfect. It’s like a much simpler, lightweight Shelfari for video games. You can now see which games I’m playing (or not playing) at my <a href="http://www.thomasupton.com/unplayed/"><em>Unplayed</em> page</a>. For now, I’m going back to Skyloft!</p>

]]></content>
  </entry>
  
</feed>
