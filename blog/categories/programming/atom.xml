<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Uptonian Thoughts]]></title>
  <link href="http://tupton.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://tupton.github.com/"/>
  <updated>2012-07-19T23:11:54-05:00</updated>
  <id>http://tupton.github.com/</id>
  <author>
    <name><![CDATA[Thomas Upton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Syntastic]]></title>
    <link href="http://tupton.github.com/2012/05/syntastic"/>
    <updated>2012-05-20T14:13:08-05:00</updated>
    <id>http://tupton.github.com/2012/05/syntastic</id>
    <content type="html"><![CDATA[<p>I love writing with <code>vim</code>, but — for many valid reasons — some people are averse to it. I think the steep (–ish) learning curve has something to do with it, but I think some people really don’t want to give up their IDE. The thing is, <code>vim</code> isn’t <em>just</em> a text editor. You can extend it to do pretty much anything, including features that normally show up in IDEs.</p>

<p>I recently started using <a href="https://github.com/scrooloose/syntastic">syntastic</a>, which is a <code>vim</code> plugin that runs linters or syntax checkers and displays warnings and errors right in your window. IDEs like Eclipse or Xcode provide this syntax-checking for a couple of languages, but syntastic supports many languages and linters out of the box with pluggable support for nearly any language. </p>

<h2 id="setup">Setup</h2>

<p>If you use <a href="https://github.com/tpope/vim-pathogen">pathogen</a> like every sane <code>vim</code> user does, installing syntastic is just like any other plugin. Clone the repository or create a submodule in <code>bundle/syntastic</code> and you’re ready to go.</p>

<p>I mainly work with Javascript, Python, HTML, and CSS, so that’s what I’ll talk about. It’s worth checking out the syntax checkers in <code>bundle/syntastic/syntax_checkers/</code>, even if you just look at the list of files there. You might have to dive into the files to figure out which linters are actually supported as it’s not clearly documented.</p>

<p>Before we get to configuring individual syntax checkers, syntastic itself has a couple of configuration options. Syntastic has what it refers to as a “mode map”, which is basically just a way to configure which file types are checked. Here is the relevant config option from <a href="https://github.com/tupton/vim-support/blob/master/vimrc#L302">my vimrc</a>:</p>

<p><code>vim
	" On by default, turn it off for html
	let g:syntastic_mode_map = { 'mode': 'active',
		\ 'active_filetypes': [],
		\ 'passive_filetypes': ['html'] }
</code></p>

<p>The ‘mode’ option set to active means that syntastic is on by default, so we can leave the list of ‘active_filetypes’ empty. The ‘passive_filetypes’ names filetypes that syntastic does not attempt to check. I don’t check HTML files because I mainly work with templates that either can’t or won’t validate with most HTML syntax checkers. If templates use non-standard attributes, it’s hard for a syntax checker to do its job.</p>

<h3 id="python">Python</h3>

<p>Setting up syntastic for use with python was extremely easy. <a href="http://pypi.python.org/pypi/pyflakes">pyflakes</a> has relatively sane defaults, so running it with no configuration is more than acceptable. Just install <code>pyflakes</code> with <code>pip install pyflakes</code> and syntastic will automatically do the rest.</p>

<h3 id="javascript">Javascript</h3>

<p>There are a number of Javascript linters, including <a href="http://www.jslint.com/">JS Lint</a> and Google’s <a href="https://developers.google.com/closure/utilities/">Closure linter</a>, but I decided to use the communtiy-driven <a href="http://www.jshint.com/">JS Hint</a>.  JS Hint can be configured with a jshintrc, which just is a JSON object that contains options. There are two categories of options: those that enforce stricter rules than the defaults and those that relax default checks. The <a href="http://www.jshint.com/options/">options page of the jshint website</a> does a great job of explaining each option. You can <a href="https://github.com/tupton/dotfiles/blob/master/jshintrc">view my jshintrc on my Github page</a>. I added a few “enforcing” options, but the only “relaxing” option I use is the “sub” option, which allows subscript notation when accessing properties, e.g. <code>this['domNode']</code> as well as <code>this.domNode</code>.</p>

<h2 id="usage">Usage</h2>

<p><img src="http://farm8.staticflickr.com/7085/7235544916_6f48ae8f45_o_d.png" alt="syntastic and underscore.js" /></p>

<p>By default, syntastic runs your file through the configured filetype’s linter whenever the buffer is written. If there are errors, they are highlighted inline. When your cursor is on a line with an error, the description of the error is visible in the status line. You can use the <code>:Errors</code> command to open a quickfix window with a list of all errors in the file. Pressing enter on an error will take you to that line in the file. Syntastic uses <a href="http://vimdoc.sourceforge.net/htmldoc/sign.html">vim’s signs</a>, which means that a gutter with a sign appears on the left side of every line with an error on it, making it easy to scan the buffer for errors.</p>

<p>You can configure syntastic in many other ways, including telling it to check a buffer whenever it is opened. I explored the help file (<code>:help syntastic</code>) when I first started using syntastic, and it was incredibly helpful. I encourage anyone who uses syntastic to do the same.</p>

<p>Syntastic has already helped me avoid many typos and silly errors that would ordinarily be hard to track down. It’s an invaluable tool in my workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Commit FIXME or TODO]]></title>
    <link href="http://tupton.github.com/2012/02/dont-commit-fixme-or-todo"/>
    <updated>2012-02-24T12:41:13-06:00</updated>
    <id>http://tupton.github.com/2012/02/dont-commit-fixme-or-todo</id>
    <content type="html"><![CDATA[<p>``` php
    &lt;?php</p>

<pre><code>function getObject($id) {
    $object = null;

    // TODO Do we need to validate username?
    $objects = $this-&gt;db-&gt;retrieveForUsername($this-&gt;username);

    // FIXME Write `retrieveForIdAndUsername` instead of iterating here
    foreach ($objects as $o) {
        if ($o-&gt;id() == $id) {
            $object = $o;
            break;
        }
    }

    return $object;
} ```
</code></pre>

<p>This shouldn’t happen. I’m not talking about the comically bad code – it’s a contrived example, but it proves the point – but about the little “notes” left by whoever committed this.</p>

<p>Do we need to validate the username? Probably. Find out, and take the necessary action. If you know your codebase well, it should take about ten seconds to know the answer.</p>

<p>The <code>FIXME</code> is a bit more time-consuming, but the payoff is greater. If you leave this <code>FIXME</code>, I’m going to assume one of two things: you’re a lazy programmer, or you’re a bad programmer. You’re lazy because you can’t be bothered to write something correctly or you’re bad because you don’t know <em>how</em> to write it correctly<sup id="fnref:bad-dev"><a href="#fn:bad-dev" rel="footnote">1</a></sup>.</p>

<p>Of course, use <code>TODO</code> or <code>FIXME</code> while you’re developing to keep a list of tasks that you have to finish before your feature is complete. Just don’t commit them to where other developers can see them and <em>certainly</em> don’t merge them to trunk.</p>

<p>If you’re lazy with that code now, there’s no way you’re going to overcome that laziness and come back to fix it later.</p>
<div class="footnotes">
  <ol>
    <li id="fn:bad-dev">
      <p>One could argue that being aware of bad code is better than nothing, but that’s fluffy. If you’re aware of a problem, you’re probably smart enough to do something about it.<a href="#fnref:bad-dev" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
